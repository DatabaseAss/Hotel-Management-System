USE MASTER;
GO
DROP DATABASE db_ass;
GO
CREATE DATABASE db_ass;
GO
USE db_ass;
GO

CREATE TABLE BRANCH (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    BRANCHID AS 'CN' + CAST(ID AS VARCHAR(3)) PERSISTED UNIQUE NOT NULL,
    PROVINCE NVARCHAR(255) DEFAULT '' NOT NULL,
    ADDR nVARCHAR(255) DEFAULT '' UNIQUE NOT NULL,
    PHONE VARCHAR(255) DEFAULT '' UNIQUE NOT NULL,						
	MAIL VARCHAR(255) DEFAULT '' UNIQUE NOT NULL,							
);

CREATE TABLE BRANCH_IMG (
    IMG_BRANCHID INT NOT NULL,										
	IMG VARCHAR(255) DEFAULT '' NOT NULL ,										-- LINK DAN DEN HINH ANH
	PRIMARY KEY(IMG_BRANCHID, IMG),				
	FOREIGN KEY(IMG_BRANCHID) REFERENCES BRANCH(ID) ON DELETE CASCADE
);

CREATE TABLE ZONES (
	ZONE_BRANCHID INT NOT NULL,										-- MA CHI NHANH (BID)
	ZNAME NVARCHAR(255) NOT NULL,									-- TEN KHU (NAME)
	PRIMARY KEY(ZONE_BRANCHID, ZNAME),				
	FOREIGN KEY(ZONE_BRANCHID) REFERENCES BRANCH(ID)  ON DELETE CASCADE
);

CREATE TABLE ROOMTYPE (
	TYPEID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,									-- MA LOAI PHONG
	TYPENAME NVARCHAR(255) NOT NULL,											-- TEN LOAI PHONG
	AREA FLOAT CHECK (AREA > 0) NOT NULL,									-- DIEN TICH
	CAPACITY INT CHECK(CAPACITY > 0 AND CAPACITY < 11) NOT NULL,	--SO NGUOI
	DESCRIPTIONS NVARCHAR(255),											-- THONG TIN THEM
);

CREATE TABLE BEDINFO (
	BED_TYPEID INT NOT NULL,												-- MA LOAI PHONG
	SIZE FLOAT CHECK (SIZE > 0) NOT NULL,							-- KICH THUOC
	QUANTITY INT DEFAULT 1 NOT NULL CHECK(QUANTITY > 0 AND QUANTITY < 11) , -- SO NNGUOI	
	PRIMARY KEY(BED_TYPEID, SIZE),
	FOREIGN KEY(BED_TYPEID) REFERENCES ROOMTYPE(TYPEID)  ON DELETE CASCADE
);

CREATE TABLE BRANCH_HAVE_ROOMTYPE (
	BHR_BRANCHID INT NOT NULL,										-- MA CHI NHANH
	BHD_TYPEID INT NOT NULL,												-- MA LOAI PHONG
	[PRICE (kVND)] INT CHECK ([PRICE (kVND)] > 0) NOT NULL,								-- GIA TIEN
	PRIMARY KEY(BHR_BRANCHID, BHD_TYPEID),
	FOREIGN KEY(BHR_BRANCHID) REFERENCES BRANCH(ID)  ON DELETE CASCADE,
	FOREIGN KEY(BHD_TYPEID) REFERENCES ROOMTYPE(TYPEID)  ON DELETE CASCADE
);


-- 7. ROOM --
CREATE TABLE ROOM(
	ROOM_BRANCHID INT NOT NULL,										-- MA CHI NHANH
	ROOMID VARCHAR(3) NOT NULL,										-- SO PHONG
	ROOM_TYPEID INT NOT NULL,												-- MA LOAI PHONG
	ROOM_ZNAME NVARCHAR(255) NOT NULL,									-- TEN PHONG
	FOREIGN KEY(ROOM_TYPEID) REFERENCES ROOMTYPE(TYPEID) ON UPDATE CASCADE,
	FOREIGN KEY(ROOM_BRANCHID) REFERENCES BRANCH(ID) ON UPDATE CASCADE, 
	FOREIGN KEY(ROOM_BRANCHID, ROOM_ZNAME) REFERENCES ZONES(ZONE_BRANCHID, ZNAME) ON UPDATE NO ACTION ON DELETE CASCADE,
    PRIMARY KEY(ROOM_BRANCHID, ROOMID)
);

-- 8. SUPPLY TYPE --
CREATE TABLE SUPPLY_TYPE  (
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	SUPPLYID AS 'VT' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,
	SNAME NVARCHAR(255) NOT NULL	
);

-- 9. SUPPLY TYPE IN ROOM --
CREATE TABLE SUPPLY_IN_ROOM (
	SIR_SUPPLYID INT NOT NULL,													-- MA LOAI VAT TU
	SIR_TYPEID INT NOT NULL,																-- MA LOAI PHONG
	NUM_SUPPLY INT DEFAULT 1 NOT NULL CHECK (NUM_SUPPLY > 0 AND NUM_SUPPLY < 21)  , 	-- SO LUONG
	PRIMARY KEY(SIR_SUPPLYID, SIR_TYPEID),
	FOREIGN KEY(SIR_TYPEID) REFERENCES ROOMTYPE(TYPEID) ON DELETE CASCADE,
	FOREIGN KEY(SIR_SUPPLYID) REFERENCES SUPPLY_TYPE(ID) ON DELETE CASCADE
);

-- 10. SUPPLY --
CREATE TABLE SUPPLY 
(
	SUPPLY_BRANCHID INT NOT NULL,										-- MA CHI NHANH
	SUPPLYID INT NOT NULL,										-- MA LOAI VAT TU
	STT_ID INT IDENTITY(1,1) NOT NULL,									-- STT VAT TU
	SUPPLY_ROOMID VARCHAR(3) NOT NULL,												-- SO PHONG
	STATUSS NVARCHAR(255),											-- TINH TRANG
	PRIMARY KEY(SUPPLY_BRANCHID, SUPPLYID, STT_ID),
	FOREIGN KEY(SUPPLY_BRANCHID) REFERENCES BRANCH(ID) ON DELETE CASCADE,
	FOREIGN KEY(SUPPLYID) REFERENCES SUPPLY_TYPE(ID)  ON DELETE CASCADE,
	FOREIGN KEY(SUPPLY_BRANCHID, SUPPLY_ROOMID) REFERENCES ROOM(ROOM_BRANCHID, ROOMID) ON UPDATE CASCADE
);

-- 11. SUPPLIER --
CREATE TABLE SUPPLIER (
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,												
	SUPPLIER_ID AS 'NCC' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,	-- MA NHA CUNG CAP
	SUPPLIER_NAME NVARCHAR(255) NOT NULL,										-- TEN NHA CUNG CAP
	SUPPLIER_EMAIL VARCHAR(255),															-- EMAIL
	SUPPLIER_ADDRES NVARCHAR(255) NOT NULL,												-- DIA CHI
);

-- 12. PROVIDE SUPPLY --
CREATE TABLE PROVIDE_SUPPLY(
	PROVIDE_SUPPLIER_ID INT NOT NULL,											-- MA NHA CUNG CAP
	PROVIDE_SUPPLY_BRANCHID INT NOT NULL,													-- MA CHI NHANH
	PROVIDE_SUPPLYID INT NOT NULL,												-- MA LOAI VAT TU
	PRIMARY KEY(PROVIDE_SUPPLYID,PROVIDE_SUPPLY_BRANCHID),
	FOREIGN KEY(PROVIDE_SUPPLIER_ID) REFERENCES SUPPLIER(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(PROVIDE_SUPPLY_BRANCHID) REFERENCES BRANCH(ID) ON DELETE CASCADE,
	FOREIGN KEY(PROVIDE_SUPPLYID) REFERENCES SUPPLY_TYPE(ID) ON DELETE CASCADE
);

-- 13. CUSTOMER --
CREATE TABLE CUSTOMER(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,												-- 6 KI TU
	CUSTOMERID AS 'KH' + RIGHT('00000' + CAST(ID AS VARCHAR(6)), 6) PERSISTED UNIQUE,				-- MA KHACH HANG	
	CCCD VARCHAR(30) UNIQUE NOT NULL,			 	 							-- CAN CUOC CONG DAN	
	FULLNAME NVARCHAR(255) NOT NULL,											-- HO TEN
	PHONENUMBER VARCHAR(12) UNIQUE NOT NULL,									-- SDT
	EMAIL VARCHAR(255) UNIQUE,													-- EMAIL
	USERNAME VARCHAR(255) UNIQUE NOT NULL,										-- TEN DANG NHAP
	POINTS INT DEFAULT 0 CHECK (POINTS >= 0) NOT NULL ,							-- DIEM
	CTYPE INT DEFAULT 1 CHECK (CTYPE > 0) NOT NULL , 							-- LOAI
);

-- 14. PACKAGE -- 
CREATE TABLE PACKAGE(
	PACKAGE_NAME NVARCHAR(255) UNIQUE NOT NULL ,									-- TEN GOI
	NUM_DAYS INT NOT NULL CHECK (NUM_DAYS > 0 AND NUM_DAYS < 101),				-- SO NGAY
	PACKAGE_CAPACITY INT NOT NULL CHECK (PACKAGE_CAPACITY > 0 AND PACKAGE_CAPACITY < 11),			-- SO NGUOI
	PACKAGE_COST INT NOT NULL CHECK(PACKAGE_COST > 0),											-- GIA TIEN
	PRIMARY KEY(PACKAGE_NAME)
);

-- 15. SERVICE BILL --
CREATE TABLE BILL_SERVICE(
	BILL_CUSTOMERID INT NOT NULL,
	BILL_PACKAGE_NAME NVARCHAR(255) NOT NULL,
	DATE_BUY DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	START_DAY DATETIME,
	CHECK (START_DAY > DATE_BUY),
	[TOTAL_COST (kVND)] INT DEFAULT 0 NOT NULL CHECK([TOTAL_COST (kVND)] > 0) ,
	FOREIGN KEY(BILL_CUSTOMERID) REFERENCES CUSTOMER(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(BILL_PACKAGE_NAME) REFERENCES PACKAGE(PACKAGE_NAME) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(BILL_CUSTOMERID, BILL_PACKAGE_NAME, START_DAY)
);

-- 16. RECEIPT --
CREATE TABLE RECEIPT (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RECEIPT_BOOKINGID AS 'DP' + CAST(ID AS VARCHAR(14)) PERSISTED UNIQUE NOT NULL,
    BOOKING_TIME DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CHECKIN DATETIME NOT NULL,
    CHECKOUT DATETIME NOT NULL,
    STAT INT DEFAULT 0 NOT NULL CHECK (STAT>-1 AND STAT<4),
	RECEIPT_CAPACITY INT NOT NULL,
    RECEIPT_TOTAL_COST INT DEFAULT 0 NOT NULL CHECK(RECEIPT_TOTAL_COST > 0),
    RECEIPT_CUSTOMERID INT NOT NULL,
    RECEIPT_PACKAGE_NAME NVARCHAR(255) NOT NULL,
    FOREIGN KEY(RECEIPT_CUSTOMERID) REFERENCES CUSTOMER(ID) ON DELETE CASCADE,
	FOREIGN KEY(RECEIPT_PACKAGE_NAME) REFERENCES PACKAGE(PACKAGE_NAME) ON DELETE CASCADE ON UPDATE CASCADE,

);

-- 17. HIRING ROOM --
CREATE TABLE HIRING_ROOM (
    HR_BOOKINGID INT NOT NULL,
    HR_BRANCHID INT NOT NULL,
    HR_ROOMID VARCHAR(3) NOT NULL,
    FOREIGN KEY(HR_BOOKINGID) REFERENCES RECEIPT(ID),
    FOREIGN KEY(HR_BRANCHID,HR_ROOMID) REFERENCES ROOM(ROOM_BRANCHID,ROOMID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(HR_BOOKINGID,HR_BRANCHID,HR_ROOMID)
);

-- 18. BILL --
CREATE TABLE BILL (
    ID INT IDENTITY(1,1) NOT NULL,
    BILLID AS 'HD' + CAST(ID AS VARCHAR(14)) PERSISTED UNIQUE NOT NULL,
    -- SELECT TIME_FORMAT(%h %i),
    BILL_CHECKIN TIME NOT NULL,
    BILL_CHECKOUT TIME NOT NULL,
    BILL_BOOKINGID VARCHAR(16) NOT NULL,
    FOREIGN KEY(BILL_BOOKINGID) REFERENCES RECEIPT(RECEIPT_BOOKINGID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (BILLID)
);

-- 19. Company --
CREATE TABLE COMPANY (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    COMPANYID AS 'DN' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,
    COMPANY_NAME NVARCHAR(255) NOT NULL,
);

-- 20. SERVICE --
CREATE TABLE SERVICES (
    ID INT IDENTITY(1,1) NOT NULL,
    SERVICEID AS 'DV' + CAST (ID AS VARCHAR(6)) PERSISTED UNIQUE NOT NULL,
    SERVICE_TYPE INT NOT NULL,
    SERVICE_CAPACITY INT NOT NULL,
    STYLE NVARCHAR(255),
    COMPANYID INT NOT NULL,
    FOREIGN KEY(COMPANYID) REFERENCES COMPANY(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(SERVICEID)
);

-- 21. SPA -- 
CREATE TABLE SPA 
(
	SPA_SERVICEID VARCHAR(8) NOT NULL,
	SPA_NAME NVARCHAR(255) UNIQUE NOT NULL,
	FOREIGN KEY(SPA_SERVICEID) REFERENCES  SERVICES(SERVICEID) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(SPA_SERVICEID, SPA_NAME)
);	

-- 22. SOUVENIR TYPE -- 
CREATE TABLE SOUVENIR
(
	SERVICEID VARCHAR(8) NOT NULL,
	SOUVENIR_NAME NVARCHAR(5) NOT NULL UNIQUE,
);

-- 23. SOUVENIR BRAND --
CREATE TABLE SOUVENIR_BRAND
(
	SBRAND_SERVICEID VARCHAR(8) NOT NULL,
	BRAND NVARCHAR(255) NOT NULL,
	FOREIGN KEY(SBRAND_SERVICEID) REFERENCES SERVICES(SERVICEID) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(SBRAND_SERVICEID, BRAND)

);

-- 24. ESTATE -- 
CREATE TABLE ESTATE
(
	ESTATE_BRANCHID INT NOT NULL,
	ESTATEID INT DEFAULT 1 NOT NULL CHECK (ESTATEID > 0 AND ESTATEID < 51),
	HEIGHT FLOAT NOT NULL CHECK(HEIGHT > 0), 
	WIDTH FLOAT NOT NULL CHECK(WIDTH > 0),
	COST INT NOT NULL,
	INFO NVARCHAR(255), 
	ESTATE_SERVICEID VARCHAR(8) NOT NULL,
	LINK VARCHAR(255) NOT NULL,
	FOREIGN KEY(ESTATE_SERVICEID) REFERENCES SERVICES(SERVICEID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(ESTATE_BRANCHID) REFERENCES BRANCH(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(ESTATE_BRANCHID, ESTATEID)
);

-- 25. STORE_PIC --
CREATE TABLE STORE_PIC
(
	SPIC_BRANCHID INT NOT NULL,
	SPIC_ID INT NOT NULL CHECK (SPIC_ID > 0 AND SPIC_ID < 51),
	SPIC_LINK VARCHAR(255) NOT NULL,
	FOREIGN KEY(SPIC_BRANCHID, SPIC_ID) REFERENCES ESTATE(ESTATE_BRANCHID, ESTATEID) ON DELETE CASCADE,
	PRIMARY KEY(SPIC_BRANCHID, SPIC_ID, SPIC_LINK)
);

-- 26. ACTIVE_TIME -- 
CREATE TABLE TIME_ACTIVITY
(
	AT_BRANCHID INT NOT NULL,
	AT_ID INT NOT NULL CHECK (AT_ID > 0 AND AT_ID < 51),
	AT_START_TIME TIME NOT NULL,
	AT_END_TIME TIME NOT NULL,
	FOREIGN KEY(AT_BRANCHID, AT_ID) REFERENCES ESTATE(ESTATE_BRANCHID, ESTATEID) ON DELETE CASCADE,
	PRIMARY KEY(AT_BRANCHID, AT_ID, AT_START_TIME)
);

SELECT *
FROM SYSOBJECTS
WHERE xtype = 'U'
GO 